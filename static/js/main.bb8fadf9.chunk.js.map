{"version":3,"sources":["Misc.js","YakCard.js","YakBoard.js","Blank.js","ActionBar.js","App.js","reportWebVitals.js","index.js"],"names":["noop","TooltipButton","placement","tooltip","delay","trigger","transition","children","restProps","OverlayTrigger","overlay","Tooltip","ref","triggerHandler","Button","MoreActionsButton","buttonChildren","useState","show","setShow","buttonRef","createRef","popoverRef","handleBlur","e","current","contains","relatedTarget","onBlur","onClick","Overlay","target","Popover","ButtonGroup","YakCard","uuid","title","index","content","isNew","onSave","onDelete","Boolean","editing","setEditing","handleDelete","handleEdit","handleCancel","handleSave","titleInput","value","contentInput","currentTarget","draggableId","provided","innerRef","draggableProps","Card","className","Header","dragHandleProps","Form","InputGroup","Control","type","defaultValue","placeholder","autoFocus","plaintext","readOnly","Append","variant","Body","as","rows","Text","YakBoard","name","cards","cardContents","filter","onAddCard","onSaveCard","onDeleteCard","editingNewCard","setEditingNewCard","handleAddCard","_","cardData","handleSaveCard","cardUuid","handleDeleteCard","droppableId","droppableProps","bg","Title","indexOf","map","block","size","ActionBar","disableUndo","disableRedo","onUndo","onRedo","onFilterChange","Navbar","fixed","collapseOnSelect","expand","Nav","NavDropdown","drop","Item","href","inline","disabled","onChange","App","props","initialData","JSON","parse","localStorage","getItem","b","uuidv4","boards","boardContents","Object","fromEntries","BlankBoards","data","setData","undo","redo","stack","setStack","filterValue","setFilterValue","console","log","useEffect","setItem","stringify","execute","operation","isNewOperation","produce","draft","boardUuid","splice","Number","MAX_SAFE_INTEGER","oldData","push","onDragEnd","destination","source","length","reverseOperation","pop","Container","fluid","Row","Col","xs","md","lg","xl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb8fadf9.chunk.js","sourcesContent":["import { createRef, useState } from \"react\";\nimport { Button, ButtonGroup, Overlay, OverlayTrigger, Popover, Tooltip } from \"react-bootstrap\";\nimport { ThreeDotsVertical } from \"react-bootstrap-icons\";\n\nlet noop = () => {};\n\nfunction TooltipButton({\n  placement, // the OverlayTrigger receives these attributes pertaining to overlays\n  tooltip,\n  delay,\n  trigger,\n  transition = false, // https://github.com/react-bootstrap/react-bootstrap/issues/5519\n  children, // the children are placed in the Button\n  ...restProps // all other attributes are set on the Button\n}) {\n  return (\n    <OverlayTrigger\n      placement={placement} delay={delay} trigger={trigger} transition={transition}\n      overlay={<Tooltip>{tooltip}</Tooltip>}\n    >\n      {({ref, ...triggerHandler}) => (\n          <Button ref={ref} {...triggerHandler} {...restProps}>{children}</Button>\n      )}\n    </OverlayTrigger>\n  );\n}\n\nfunction MoreActionsButton({\n  children,\n  buttonChildren = <ThreeDotsVertical />,\n  ...restProps\n}) {\n  // states\n  let [show, setShow] = useState(false);\n  // refs\n  let buttonRef = createRef();\n  let popoverRef = createRef();\n  // handlers\n  let handleBlur = (e) => {\n    if (\n      show\n      && !buttonRef.current.contains(e.relatedTarget)\n      && !popoverRef.current.contains(e.relatedTarget)\n    ) {\n      setShow(false);\n    }\n  }\n\n  // popovers don't appear as children of whatever they are children of, so:\n  // a simple OverlayTrigger with onBlur doesn't work; OverlayTriggers aren't elements, so do not process onBlur\n  // a div with onBlur surrounding an OverlayTrigger doesn't work; e.currentTarget does not contain the popover\n  // manually creating a Button and an Overlay as siblings and putting onBlur on both doesn't work; the Overlay does not contain the popover\n  // putting the onBlur on the Popover doesn't work; it's a function component\n  // putting it on a div inside the Popover works though.\n\n  return (\n    <>\n      <Button\n        onBlur={handleBlur} onClick={() => setShow(!show)}\n        ref={buttonRef}\n        {...restProps}\n      >\n        {buttonChildren}\n      </Button>\n      <Overlay\n        show={show} placement=\"left\" transition={false}\n        target={buttonRef}\n      >\n        <Popover>\n          <ButtonGroup onBlur={handleBlur} ref={popoverRef}>\n            {children}\n          </ButtonGroup>\n        </Popover>\n      </Overlay>\n    </>\n  );\n}\n\nexport {noop, TooltipButton, MoreActionsButton};","import { createRef, useState } from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { Card, Form, InputGroup } from \"react-bootstrap\";\nimport { Check, PencilFill, TrashFill, X } from \"react-bootstrap-icons\";\nimport { MoreActionsButton, noop, TooltipButton } from \"./Misc\";\n\nexport default function YakCard({\n    uuid,\n    title,\n    index = null, // required for react-beautiful-dnd Draggable\n    content, // content of card, will be rendered into markdown\n    isNew = false, // if true, the card is created in edit mode, with focus on the title field\n    onSave = noop, // (cardUuid, cardData) - called when the card loses focus in editing mode, or the save button is clicked\n    onDelete = noop, // (cardUuid) - called when the delete button is clicked\n  }) {\n    // states\n    let [editing, setEditing] = useState(Boolean(isNew));\n    // handlers\n    let handleDelete = () => onDelete(uuid);\n    let handleEdit = () => setEditing(true);\n    let handleCancel = () => setEditing(false);\n    let handleSave = () => {\n      if (isNew && !titleInput.current.value && !contentInput.current.value) {\n        // if a new card is being saved, with blank title and content, treat as a delete\n        onDelete(uuid);\n      }\n      else {\n        onSave(uuid, {\n          title: titleInput.current.value,\n          content: contentInput.current.value,\n        });\n      }\n      setEditing(false);\n    };\n    let handleBlur = e => {\n      // trigger a save only if currently editing and the newly focused element is outside of the card\n      if (editing && !e.currentTarget.contains(e.relatedTarget)) {\n        handleSave();\n      }\n    };\n    // refs\n    let titleInput = createRef(); // handle editing of title and content using uncontrolled components\n    let contentInput = createRef(); // this gives us the ability to cancel just by...cancelling\n\n    return (\n      <Draggable draggableId={uuid} index={index}>\n        {(provided) => (\n          <div ref={provided.innerRef} {...provided.draggableProps}>\n            <Card className=\"mb-3\" onBlur={handleBlur}>\n              <Card.Header {...provided.dragHandleProps}>\n                <Form>\n                  <InputGroup>\n                    {editing ?\n                      <Form.Control key=\"editing\"\n                        type=\"text\"\n                        defaultValue={title} placeholder=\"Title\" autoFocus={isNew}\n                        ref={titleInput}\n                      />\n                      : <Form.Control key=\"static\"\n                        type=\"text\"\n                        value={title} plaintext readOnly\n                      />\n                    }\n                    <InputGroup.Append>\n                      {editing ?\n                        <>\n                          <TooltipButton\n                            tooltip=\"Cancel edits\"\n                            variant=\"outline-danger\"\n                            onClick={handleCancel}\n                            children={<X />}\n                          />\n                          <TooltipButton\n                            tooltip=\"Save edits\"\n                            variant=\"success\"\n                            type=\"submit\"\n                            onClick={handleSave}\n                            children={<Check />}\n                          />\n                        </>\n                        : <MoreActionsButton variant=\"light\">\n                          <TooltipButton tooltip=\"Edit card\" variant=\"info\" onClick={handleEdit} children={<PencilFill />} />\n                          <TooltipButton tooltip=\"Delete card\" variant=\"danger\" onClick={handleDelete} children={<TrashFill />} />\n                        </MoreActionsButton>\n                      }\n                    </InputGroup.Append>\n                  </InputGroup>\n                </Form>\n              </Card.Header>\n              {(content || editing) ?\n                <Card.Body>\n                  {editing ?\n                    <Form.Control\n                      as=\"textarea\" rows={4}\n                      defaultValue={content} placeholder=\"Details\"\n                      autoFocus={!isNew}\n                      ref={contentInput}\n                    />\n                    : <>\n                      <Card.Text>{content}</Card.Text>\n                      {/* <Card.Text>\n                        {props.tags.map(tag =>\n                          <Badge variant=\"secondary\" key=\"tag\">{tag}</Badge>\n                        )}\n                      </Card.Text> */}\n                    </>\n                  }\n                </Card.Body>\n                : null\n              }\n            </Card>\n          </div>\n        )}\n        </Draggable>\n    );\n  }","import { useState } from \"react\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport { Card } from \"react-bootstrap\";\nimport { noop, TooltipButton } from \"./Misc\";\nimport YakCard from \"./YakCard\";\n\nexport default function YakBoard({\n    uuid,\n    name,\n    cards,\n    cardContents,\n    filter,\n    onAddCard = noop, // (boardUuid, cardData) - called when a new card is added to this board\n    onSaveCard = noop, // (boardUuid, cardUuid, cardData) - called when a card on this board triggers its onSave event\n    onDeleteCard = noop, // (boardUuid, cardUuid) - called when a card on this board triggers its onDelete event\n  }) {\n    // states\n    let [editingNewCard, setEditingNewCard] = useState(false);\n    // handlers\n    let handleAddCard = (_, cardData) => { onAddCard(uuid, cardData); setEditingNewCard(false); }\n    let handleSaveCard = (cardUuid, cardData) => onSaveCard(uuid, cardUuid, cardData);\n    let handleDeleteCard = (cardUuid) => onDeleteCard(uuid, cardUuid);\n  \n    return (\n      <Droppable droppableId={uuid}>\n        {(provided) => (\n          <div ref={provided.innerRef} {...provided.droppableProps}>\n            <Card bg=\"light\" className=\"mt-4\">\n              <Card.Header>\n                <Card.Title className=\"text-center\">{name}</Card.Title>\n              </Card.Header>\n              <Card.Body>\n                {cards.filter(\n                  uuid => cardContents[uuid].title.indexOf(filter) !== -1\n                  || cardContents[uuid].content.indexOf(filter) !== -1\n                ).map((uuid, index) => \n                  <YakCard\n                    key={uuid} uuid={uuid} index={index}\n                    title={cardContents[uuid].title} content={cardContents[uuid].content}\n                    onSave={handleSaveCard} onDelete={handleDeleteCard}\n                  />\n                )}\n                {editingNewCard ?\n                  <YakCard isNew\n                    onSave={handleAddCard} onDelete={() => setEditingNewCard(false)}\n                  />\n                  : <TooltipButton\n                    block variant=\"outline-secondary\" size=\"lg\"\n                    tooltip=\"Add new card\" placement=\"bottom\"\n                    onClick={() => setEditingNewCard(true)}\n                    children=\"+\"\n                  />\n                }\n              </Card.Body>\n            </Card>\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    );\n  }","import { v4 as uuidv4 } from 'uuid';\n\nexport let BlankBoards = () => {\n    let b = [[uuidv4(), 'Waiting'], [uuidv4(), 'In Progress'], [uuidv4(), 'Complete']];\n    return {\n        boards: b.map(([uuid, name]) => uuid),\n        boardContents: Object.fromEntries(b.map(([uuid, name]) => [uuid, {\n            name,\n            cards: []\n        }])),\n        cardContents: {}\n    }\n}\nexport let BlankCard = () => Map({name: \"\", content: \"\", isNew: true});","import { ButtonGroup, Form, InputGroup, Nav, Navbar, NavDropdown } from \"react-bootstrap\";\nimport { ArrowClockwise, ArrowCounterclockwise, FunnelFill, Github } from \"react-bootstrap-icons\";\nimport { noop, TooltipButton } from \"./Misc\";\n\n// github\nexport default function ActionBar({\n  disableUndo,\n  disableRedo,\n  onUndo = noop,\n  onRedo = noop,\n  filter,\n  onFilterChange = noop, // (filter) - called when the filter input changes\n}) {\n  // handlers\n  let handleFilterChange = (e) => onFilterChange(e.target.value);\n\n  return (\n    <Navbar\n      bg='light' variant='light' fixed='top'\n      collapseOnSelect expand='md'\n    >\n      <Nav>\n        <NavDropdown drop='down' title='yakboard'>\n          <NavDropdown.Item href='#'>Nothing here yet...</NavDropdown.Item>\n        </NavDropdown>\n      </Nav>\n      <Form inline className='ml-2'>\n        <ButtonGroup>\n          <TooltipButton\n            variant='link' size='sm'\n            tooltip='Undo' placement='bottom'\n            disabled={disableUndo} onClick={onUndo}\n            children={<ArrowCounterclockwise />}\n          />\n          <TooltipButton\n            variant='link' size='sm'\n            tooltip='Redo' placement='bottom'\n            disabled={disableRedo} onClick={onRedo}\n            children={<ArrowClockwise />}\n          />\n        </ButtonGroup>\n      </Form>\n      <Form inline className='ml-auto'>\n        <InputGroup className='ml-2'>\n          <Form.Control\n            type='text' placeholder='Filter'\n            value={filter} onChange={handleFilterChange}\n          />\n          <InputGroup.Append>\n            <InputGroup.Text><FunnelFill /></InputGroup.Text>\n          </InputGroup.Append>\n        </InputGroup>\n        <TooltipButton\n          href='https://github.com/jeslinmx/yakboard'\n          variant='light' size='sm' className='ml-2'\n          tooltip='View on GitHub' placement='bottom'\n          children={<Github />}\n        />\n      </Form>\n    </Navbar>\n  );\n}","// TODO:\n// - move cards\n// - add lists\n// - edit list names\n// - rearrange lists\n// - keyboard shortcuts\n// - markdown rendering\n// - tags rendering\n// - checkbox 2-way flow\n// - help page\n// - dark theme\n// - what other ui toolkits?\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport produce from 'immer';\nimport { v4 as uuidv4 } from 'uuid';\nimport YakBoard from './YakBoard';\nimport { BlankBoards } from './Blank';\nimport ActionBar from './ActionBar';\nimport { DragDropContext } from 'react-beautiful-dnd';\n\n\nfunction App(props) {\n  // read data from persistent storage\n  let initialData = JSON.parse(localStorage.getItem('boards')) || BlankBoards();\n  // states\n  let [data, setData] = useState(initialData);\n  let [stack, setStack] = useState({\n    undo: [],\n    redo: []\n  });\n  let [filterValue, setFilterValue] = useState('');\n  console.log(data)\n  // effects\n  useEffect(() => {\n    localStorage.setItem('boards', JSON.stringify(data));\n  }, [data]);\n  // handlers\n  let execute = (operation, isNewOperation = true) => {\n    operation = {...operation};\n    if (operation.type === 'add') {\n      setData(produce(draft => {\n        draft.boardContents[operation.boardUuid].cards.splice(operation.index || Number.MAX_SAFE_INTEGER, 0, operation.cardUuid);\n        draft.cardContents[operation.cardUuid] = operation.data;\n      }));\n    } else if (operation.type === 'save') {\n      operation.oldData = data.cardContents[operation.cardUuid];\n      setData(produce(draft => {\n        draft.cardContents[operation.cardUuid] = operation.data;\n      }));\n    } else if (operation.type === 'delete') {\n      operation.oldData = data.cardContents[operation.cardUuid];\n      operation.index = data.boardContents[operation.boardUuid].cards.indexOf(operation.cardUuid);\n      setData(produce(draft => {\n        draft.boardContents[operation.boardUuid].cards.splice(operation.index, 1);\n        delete draft.cardContents[operation.cardUuid];\n      }));\n    } else if (operation.type === 'move') {\n      setData(produce(draft => {\n        draft.boardContents[operation.data.droppableId].cards.splice(operation.data.index, 0, operation.cardUuid);\n        draft.boardContents[operation.oldData.droppableId].cards.splice(operation.oldData.index, 1);\n      }))\n    }\n    console.log(operation);\n    if (isNewOperation) {\n      setStack(produce(draft => {\n        draft.undo.push(operation);\n        draft.redo = [];\n      }));\n    }\n  };\n  let reverseOperation = operation => ({\n    ...operation,\n    type: { 'add': 'delete', 'delete': 'add', 'save': 'save', 'move': 'move' }[operation.type],\n    data: operation.oldData,\n    oldData: operation.data,\n  });\n\n  let handleAddCard = (boardUuid, cardData) => execute({\n    type: 'add',\n    boardUuid,\n    cardUuid: uuidv4(),\n    data: cardData,\n  });\n  let handleSaveCard = (boardUuid, cardUuid, cardData) => execute({\n    type: 'save',\n    boardUuid,\n    cardUuid,\n    data: cardData,\n  });\n  let handleDeleteCard = (boardUuid, cardUuid) => execute({\n    type: 'delete',\n    boardUuid,\n    cardUuid,\n  });\n  let handleUndo = () => {\n    let operation = stack.undo[stack.undo.length - 1];\n    execute(reverseOperation(operation), false);\n    setStack(produce(draft => {\n      draft.redo.push(draft.undo.pop())\n    }));\n  };\n  let handleRedo = () => {\n    let operation = stack.redo[stack.redo.length - 1];\n    execute(operation, false);\n    setStack(produce(draft => {\n      draft.undo.push(draft.redo.pop())\n    }));\n  };\n  let handleFilterChange = (filter) => {\n    setFilterValue(filter);\n  };\n  let handleDragEnd = ({destination, source, draggableId}) => {\n    if (!destination) {\n      return;\n    }\n    if (\n      destination.droppableId === source.droppableId\n      && destination.index === source.index\n    ) {\n      return;\n    }\n    execute({\n      type: 'move',\n      cardUuid: draggableId,\n      data: destination,\n      oldData: source,\n    })\n  }\n\n  return (\n    <DragDropContext onDragEnd={handleDragEnd}>\n      <ActionBar\n        disableUndo={stack.undo.length <= 0} disableRedo={stack.redo.length <= 0}\n        onUndo={handleUndo} onRedo={handleRedo}\n        filter={filterValue} onFilterChange={handleFilterChange}\n      />\n      <Container fluid className='pt-5'>\n        <Row>\n          {data.boards.map((uuid) => \n            <Col xs={12} md={6} lg={4} xl={3} key={uuid}>\n              <YakBoard\n                uuid={uuid}\n                name={data.boardContents[uuid].name}\n                cards={data.boardContents[uuid].cards}\n                cardContents={data.cardContents}\n                filter={filterValue}\n                onAddCard={handleAddCard} onSaveCard={handleSaveCard} onDeleteCard={handleDeleteCard}\n              />\n            </Col>\n          )}\n        </Row>\n      </Container>\n    </DragDropContext>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}